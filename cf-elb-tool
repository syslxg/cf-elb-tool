#!/usr/bin/env ruby

require 'aws-sdk'
require 'yaml'
require 'mothership'

class Cf_elb_tool < Mothership

  desc "backup all elb setttings to a yml file"
  input :yml_file, :argument => :optional

  def backup
    aws_login
    yml = dump_elbs

    output_file = input[:yml_file]
    if output_file.nil? then puts yml
    else
      File.open( output_file, "w" ) do |f|
        f.write yml
      end
    end
  end

  desc "restore ELBs from a yml file"
  input :yml_file, :argument => true

  def restore
    aws_login
    @elbs=YAML::load_file(input[:yml_file])["elbs"]
    validate_settings
    @elbs.each do |name, settings|
      puts "restoring elb: #{name}"
      options={
          "subnets" => settings["subnets"],
          "security_groups" => settings["security_groups"],
          "listeners" => settings["listeners"]
      }
      health_check=settings["health_check"]

      new_elb=elb.load_balancers.create(name,options)
      puts "  #{new_elb.dns_name} created"
      new_elb.configure_health_check health_check

    end
  end

  def aws_login
    AWS.config(
        access_key_id: required_env('BOSH_AWS_ACCESS_KEY_ID'),
        secret_access_key: required_env('BOSH_AWS_SECRET_ACCESS_KEY')
    )
  end

  def required_env(name)
    ENV.fetch(name) { abort "please set environment variable '#{name}' first" }
  end

  def ec2
    @ec2 ||= AWS::EC2.new
  end

  def r53
    @r53 ||= AWS::Route53.new
  end

  def s3
    @s3 ||= AWS::S3.new
  end

  def elb
    @elb ||= AWS::ELB.new
  end

  def iam
    @iam ||= AWS::IAM.new
  end

  def dump_listener(listener)
    hash= {
      "load_balancer_port" => listener.port,
      "protocol" => listener.protocol.to_s,
      "instance_port" => listener.instance_port,
      "instance_protocol" => listener.instance_protocol.to_s
    }
    # server_certificate.arn is undocumented
    # https://github.com/aws/aws-sdk-ruby/issues/499
    hash["ssl_certificate_id"] = listener.server_certificate.arn if listener.server_certificate
    return hash
  end

  def dump_elbs
    elbs={}
    elb.load_balancers.each do |e|
      name = e.name
      settings = {}
      settings["subnets"] = e.subnet_ids.to_a
      settings["security_groups"] = e.security_groups.map(&:name)
      settings["health_check"] = e.health_check
      settings["instances"] = e.instances.map(&:id)  unless settings["instances"].nil?
      settings["listeners"] = e.listeners.map { |l| dump_listener l}
      settings["dns_record"] = nil
      settings["domain"] = nil
      settings["cert"] = nil
      elbs[name]=settings
    end
    return YAML.dump( "elbs" => elbs )
  end

  def validate_settings
    @elbs.each do |name, settings|

      #check subnets
      settings["subnets"].each do |s|

        abort("subnet #{s} not found") if ec2.subnets.filter('subnet-id',s).first.nil?
      end

      #check security groups and convert grpup-name to group_id
      group_ids = settings["security_groups"].map do |sg|
          sg_found=ec2.security_groups.filter('group-name',sg).first
          abort "security groups #{sg} not found" if sg_found.nil?
          sg_found.group_id
      end

      @elbs[name]["security_groups"]= group_ids

      #check certs
      settings["listeners"].each do |l|
        arn = l["ssl_certificate_id"]
        unless arn.nil?
          found = iam.server_certificates.find { |c| c.arn == l["ssl_certificate_id"] }
          abort "certificate #{arn} is not found" unless found
        end
      end

    end

  end
end

Mothership.start(ARGV)